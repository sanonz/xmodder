name: xmodder-server
version: '3.8'

services:
  # Redis (用于缓存和会话存储)
  redis:
    image: redis:7-alpine
    container_name: xmodder-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - xmodder-network
    command: redis-server --appendonly yes

  # PostgreSQL 数据库
  postgres:
    image: postgres:15-alpine
    container_name: xmodder-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DATABASE_NAME:-xmodder}
      POSTGRES_USER: ${DATABASE_USERNAME:-postgres}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD:-password}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - xmodder-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # NestJS 应用
  nestjs:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: xmodder-nestjs
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: ${APP_PORT:-3000}
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-password}@postgres:5432/${POSTGRES_DB:-xmodder}
    ports:
      - "${APP_PORT:-3000}:${APP_PORT:-3000}"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./src:/app/src
      - ./package.json:/app/package.json
      - ./tsconfig.json:/app/tsconfig.json
      - ./nest-cli.json:/app/nest-cli.json
    networks:
      - xmodder-network
    command: npm run start:prod

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  xmodder-network:
    driver: bridge
